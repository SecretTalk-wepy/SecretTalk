<style type="less">
    .weui-navbar__item.weui-bar__item_on {
        color : #800080;
        width: 20%;
    }
    .tab_item {
        height: 100%;
    }
    page, .body{
        height: 100%;
        font-family: '\5FAE\8F6F\96C5\9ED1', arial;
        background-color: #f0eff5;
    }
    .header-wrapper {
        position: relative;
        display: flex;
        align-content: center;
        height: 60rpx;
    }
    .weui-tab__panel {
        margin-bottom: 100rpx;
        flex: auto;
        position: relative;
    }
    
    .weui-tab__panel scroll-view{
        /* position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        top: 0; */
    }
    
    .loading{
        padding: 10rpx;
        text-align: center;
    }
    .loading:before{
        display: inline-block;
        margin-right: 5rpx;
        vertical-align: middle;
        content: '';
        width: 40rpx;
        height: 40rpx;
        background: url(../../images/icon-loading.png) no-repeat;
        background-size: contain;
        animation: rotate 1s linear infinite;
    }
    .loading.complete:before{
        display: none;
    }

</style>

<template>
    <view>
        <view class="page__bd">
            <view class="weui-tab">
                <view class="weui-navbar">
                    <view wx:for="{{shareContentClass}}" wx:key="*this" id="{{index}}" class="weui-navbar__item {{activeIndex == index ? 'weui-bar__item_on' : ''}}" @tap="tabClick">
                        <view class="weui-navbar__title">{{item}}</view>
                    </view>
                    <view class="weui-navbar__slider" style="background-color: #800080; left: {{sliderLeft}}px; transform: translateX({{sliderOffset}}px); -webkit-transform: translateX({{sliderOffset}}px); width:20%"></view>
                </view>
                <view class="weui-tab__panel">
                    <scroll-view scroll-y="true" bindscrolltolower="searchScrollLower" class="weui-tab__content" hidden="{{activeIndex != 0}}">
                        <repeat for="{{healthContentList}}" key="index" index="index" item="item">
                            <shareContent 
                                :messageId="item.messageId"
                                :message="item.message"
                                :timestamp="item.timestamp"
                                :likeNum="item.likeNum"
                                :messageType="item.messageType" />
                        </repeat>                     
                    </scroll-view>
                    <scroll-view scroll-y="true" bindscrolltolower="searchScrollLower" class="weui-tab__content" hidden="{{activeIndex != 1}}">
                        <repeat for="{{WorkplaceContentList}}" key="index" index="index" item="item">
                            <shareContent 
                                :messageId="item.messageId"
                                :message="item.message"
                                :timestamp="item.timestamp"
                                :likeNum="item.likeNum"
                                :messageType="item.messageType" />
                        </repeat>
                    </scroll-view>
                    <scroll-view scroll-y="true" bindscrolltolower="searchScrollLower" class="weui-tab__content" hidden="{{activeIndex != 2}}">
                        <repeat for="{{emotionContentList}}" key="index" index="index" item="item">
                            <shareContent 
                                :messageId="item.messageId"
                                :message="item.message"
                                :timestamp="item.timestamp"
                                :likeNum="item.likeNum"
                                :messageType="item.messageType" />
                        </repeat>
                    </scroll-view>
                    <scroll-view scroll-y="true" bindscrolltolower="searchScrollLower" class="weui-tab__content" hidden="{{activeIndex != 3}}">
                        <repeat for="{{marriageContentList}}" key="index" index="index" item="item">
                            <shareContent 
                                :messageId="item.messageId"
                                :message="item.message"
                                :timestamp="item.timestamp"
                                :likeNum="item.likeNum"
                                :messageType="item.messageType" />
                        </repeat>
                    </scroll-view>
                    <scroll-view scroll-y="true" bindscrolltolower="searchScrollLower" class="weui-tab__content" hidden="{{activeIndex != 4}}">
                        <repeat for="{{otherContentList}}" key="index" index="index" item="item">
                            <shareContent 
                                :messageId="item.messageId"
                                :message="item.message"
                                :timestamp="item.timestamp"
                                :likeNum="item.likeNum"
                                :messageType="item.messageType" />
                        </repeat>
                    </scroll-view>
                </view>
            </view>
        </view>

    </view>
</template>

<script>
    import wepy from 'wepy'
    import BottomTabBar from '../components/tab'
    import ShareContent from '../components/shareContent'

    const sliderWidth = 38
    
    export default class Piazza extends wepy.page {
        config = {
            'navigationBarTitleText': '广场'
        }

        components = {
            bottomTabBar: BottomTabBar,
            shareContent: ShareContent
        }

        data = {
            shareContentClass: ['健康', '职场', '情感', '婚姻', '其他'],
            activeIndex: 0,
            sliderOffset: 0,
            sliderLeft: 0,

            healthContentList: [],
            WorkplaceContentList: [],
            emotionContentList: [],
            marriageContentList: [],
            otherContentList: [],

            loadPage: 0,
            loadSize: 8,
            searchLoading: false, // "上拉加载"的变量，默认false，隐藏
            searchLoadingComplete: false,  // “没有数据”的变量，默认false，隐藏
            isFromSearch: true   // 用于判断searchSongList数组是不是空数组，默认true，空的数组
        }

        methods = {
            async tabClick (e) {
                console.log('piazza tabClick')
                
                this.sliderOffset = e.currentTarget.offsetLeft
                this.activeIndex = e.currentTarget.id

                await this.fetchData();
            },

            // 滚动到底部触发事件
            async searchScrollLower() {
                console.log('piazza searchScrollLower')
                
                let that = this;
                console.log(that.data.searchLoading)
                console.log(!that.data.searchLoadingComplete)
                if(that.data.searchLoading && !that.data.searchLoadingComplete){
                    console.log('piazza searchScrollLower in')
                    that.setData({
                        loadPage: that.data.loadPage + 1,  // 每次触发上拉事件，把searchPageNum+1
                        isFromSearch: false  // 触发到上拉事件，把isFromSearch设为为false
                    });
                await that.fetchData();
                }
            }
        }

        async fetchData(postBody) {
            console.log('piazza fetchData')
            
            let that = this
            that.setData({
                loadPage: that.data.loadPage + 1,  // 每次触发上拉事件，把searchPageNum+1
                isFromSearch: false  // 触发到上拉事件，把isFromSearch设为为false
            });
            let searchPageNum = that.data.loadPage  // 把第几次加载次数作为参数
            let callbackcount = that.data.loadSize  // 返回数据的个数
            let msgType= parseInt(this.activeIndex)
            //访问网络
            await that.getSearchSecrete(searchPageNum, callbackcount)
        }

        async getSearchSecrete(pageindex, callbackcount, callback){
            var msgType = parseInt(this.activeIndex)
            let postBody = {
                type: msgType,
                page: pageindex,
                size: this.loadSize
            }
            console.log('piazza getSearchSecrete postBody:')
            console.log(postBody)
            let res = await wepy.request({
                url: `${this.$parent.globalData.baseUrl}/square/index`,
                method: 'POST',
                data: postBody
            })
            
            if(res.statusCode == 200){
                console.log('piazza getSearchSecrete request ok')
                // callback(res.data.respondBody);

                let that = this
                var dataList = res.data.respondBody

                console.log('piazza fetchData show data:')
                console.log(res.data)
                // 判断是否有数据，有则取数据
                if(dataList.length != 0){
                    let searchList = [];
                    that.setData({
                        searchLoading: true   //把"上拉加载"的变量设为true，显示
                    });
                    //如果isFromSearch是true从data中取出数据，否则先从原来的数据继续添加
                    if (msgType === 0) {
                        that.data.isFromSearch ? searchList = dataList : searchList = that.data.healthContentList.concat(dataList)
                        console.log('searchList:')
                        console.log(searchList)
                        that.setData({
                            healthContentList: searchList
                        });
                        console.log(that)
                    } else if (msgType === 1) {
                        that.data.isFromSearch ? searchList = dataList : searchList = that.data.WorkplaceContentList.concat(dataList)
                        that.setData({
                            WorkplaceContentList: searchList
                        });
                    } else if (msgType === 2) {
                        that.data.isFromSearch ? searchList = dataList : searchList = that.data.emotionContentList.concat(dataList)
                        that.setData({
                            emotionContentList: searchList
                        });
                    } else if (msgType === 3) {
                        that.data.isFromSearch ? searchList = dataList : searchList = that.data.marriageContentList.concat(dataList)
                        that.setData({
                            marriageContentList: searchList
                        });
                    } else if (msgType === 4) {
                        that.data.isFromSearch ? searchList = dataList : searchList = that.data.otherContentList.concat(dataList)
                        that.setData({
                            otherContentList: searchList
                        });
                    }
                //没有数据了，把“没有数据”显示，把“上拉加载”隐藏
                } else {
                    this.setData({
                        searchLoadingComplete: true, //把“没有数据”设为true，显示
                        searchLoading: false  //把"上拉加载"的变量设为false，隐藏
                    });
                }

                // 判断页数
                if (res.data.code == '300') {
                    that.data.pageindex = that.data.pageindex + 1
                }
                this.data = that.data
                console.log('this after:')
                console.log(this)
            }
        }


        async onLoad () {
            console.log('piazza onload')
            let res = wx.getSystemInfoSync()
            this.sliderLeft = (res.windowWidth / this.shareContentClass.length - sliderWidth) / 5
            this.sliderOffset = res.windowWidth / this.shareContentClass.length * this.activeIndex

            this.setData({  
                loadPage: 0,   //第一次加载，设置0
                isFromSearch: true,  //第一次加载，设置true
                searchLoading: true,  //把"上拉加载"的变量设为true，显示
                searchLoadingComplete:false //把“没有数据”设为false，隐藏
            })
        }

        async onShow () {
            console.log('piazza onshow')
            
            await this.fetchData();
            console.log('piazza onshow this data:')
            console.log(this.data)
        }

        async onReachBottom() {
            console.log('onReachBottom')

            await this.fetchData();
            console.log('piazza onReachBottom this data:')
            console.log(this.data)
        }
        
        events = {
            async toShareDetail(target) {
                console.log('toShareDetail:')
                console.log(target.messageId)
                var msgid = target.messageId
                await wepy.setStorage({
                    key: 'msgId',
                    data: msgid
                })
                this.$root.$navigate({url: './shareContentDetail'})
            }
        }
    }
</script>
